{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { insertAppointmentSchema, insertCartItemSchema, loginSchema, registerSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcrypt\";\nimport { randomBytes } from \"crypto\";\n\n// Debug: Log environment variables\nconsole.log('STRIPE_SECRET_KEY:', process.env.STRIPE_SECRET_KEY ? 'exists (length: ' + process.env.STRIPE_SECRET_KEY.length + ')' : 'not found');\nconsole.log('TESTING_STRIPE_SECRET_KEY:', process.env.TESTING_STRIPE_SECRET_KEY ? 'exists (length: ' + process.env.TESTING_STRIPE_SECRET_KEY.length + ')' : 'not found');\n\nconst stripe = process.env.STRIPE_SECRET_KEY \n  ? new Stripe(process.env.STRIPE_SECRET_KEY)\n  : null;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Product routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { category, featured, search } = req.query;\n      \n      let products;\n      if (search) {\n        products = await storage.searchProducts(search as string);\n      } else {\n        products = await storage.getProducts(\n          category as string | undefined,\n          featured === 'true' ? true : undefined\n        );\n      }\n      \n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching products: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching product: \" + error.message });\n    }\n  });\n\n  // Appointment routes\n  app.post(\"/api/appointments\", async (req, res) => {\n    try {\n      const validatedData = insertAppointmentSchema.parse(req.body);\n      const appointment = await storage.createAppointment(validatedData);\n      res.status(201).json(appointment);\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error creating appointment: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/appointments\", async (req, res) => {\n    try {\n      const appointments = await storage.getAppointments();\n      res.json(appointments);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching appointments: \" + error.message });\n    }\n  });\n\n  app.patch(\"/api/appointments/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      const appointment = await storage.updateAppointmentStatus(req.params.id, status);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      res.json(appointment);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating appointment: \" + error.message });\n    }\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User with this email already exists\" });\n      }\n      \n      const existingUsername = await storage.getUserByUsername(validatedData.username);\n      if (existingUsername) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n      \n      // Hash password\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n      \n      // Create user\n      const user = await storage.createUser({\n        username: validatedData.username,\n        email: validatedData.email,\n        password: hashedPassword\n      });\n      \n      // Create session\n      const sessionToken = randomBytes(32).toString('hex');\n      const session = await storage.createUserSession({\n        userId: user.id,\n        sessionToken,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days\n      });\n      \n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email\n        },\n        sessionToken: session.sessionToken\n      });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Error creating account: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      \n      // Find user by email\n      const user = await storage.getUserByEmail(validatedData.email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      // Verify password\n      const isValidPassword = await bcrypt.compare(validatedData.password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      // Create session\n      const sessionToken = randomBytes(32).toString('hex');\n      const session = await storage.createUserSession({\n        userId: user.id,\n        sessionToken,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days\n      });\n      \n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email\n        },\n        sessionToken: session.sessionToken\n      });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Error logging in: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      const { sessionToken } = req.body;\n      if (sessionToken) {\n        await storage.deleteUserSession(sessionToken);\n      }\n      res.json({ message: \"Logged out successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error logging out: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader) {\n        return res.status(401).json({ message: \"No authorization header\" });\n      }\n      \n      const sessionToken = authHeader.replace('Bearer ', '');\n      const session = await storage.getUserSession(sessionToken);\n      \n      if (!session || session.expiresAt < new Date()) {\n        return res.status(401).json({ message: \"Invalid or expired session\" });\n      }\n      \n      const user = await storage.getUser(session.userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n      \n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email\n      });\n    } catch (error: any) {\n      res.status(401).json({ message: \"Authentication failed: \" + error.message });\n    }\n  });\n\n  // User-specific routes\n  app.get(\"/api/user/orders\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const sessionToken = authHeader.replace('Bearer ', '');\n      const session = await storage.getUserSession(sessionToken);\n      \n      if (!session || session.expiresAt < new Date()) {\n        return res.status(401).json({ message: \"Invalid or expired session\" });\n      }\n      \n      const orders = await storage.getUserOrders(session.userId);\n      res.json(orders);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching orders: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/user/appointments\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const sessionToken = authHeader.replace('Bearer ', '');\n      const session = await storage.getUserSession(sessionToken);\n      \n      if (!session || session.expiresAt < new Date()) {\n        return res.status(401).json({ message: \"Invalid or expired session\" });\n      }\n      \n      const appointments = await storage.getUserAppointments(session.userId);\n      res.json(appointments);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching appointments: \" + error.message });\n    }\n  });\n\n  // Cart routes\n  app.get(\"/api/cart/:sessionId\", async (req, res) => {\n    try {\n      const cartItems = await storage.getCartItems(req.params.sessionId);\n      const cartWithProducts = await Promise.all(\n        cartItems.map(async (item) => {\n          const product = await storage.getProduct(item.productId);\n          return { ...item, product };\n        })\n      );\n      res.json(cartWithProducts);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching cart: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/cart\", async (req, res) => {\n    try {\n      const validatedData = insertCartItemSchema.parse(req.body);\n      const cartItem = await storage.addToCart(validatedData);\n      res.status(201).json(cartItem);\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error adding to cart: \" + error.message });\n    }\n  });\n\n  app.patch(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const { quantity } = req.body;\n      const cartItem = await storage.updateCartItemQuantity(req.params.id, quantity);\n      if (!cartItem) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      res.json(cartItem);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error updating cart item: \" + error.message });\n    }\n  });\n\n  app.delete(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const success = await storage.removeFromCart(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error removing from cart: \" + error.message });\n    }\n  });\n\n  app.delete(\"/api/cart/clear/:sessionId\", async (req, res) => {\n    try {\n      await storage.clearCart(req.params.sessionId);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error clearing cart: \" + error.message });\n    }\n  });\n\n  // Stripe payment route for cart-based payments\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(500).json({ message: \"Payment processing is unavailable. Stripe configuration is missing.\" });\n      }\n      \n      const { sessionId } = req.body;\n      \n      if (!sessionId) {\n        return res.status(400).json({ message: \"Session ID required\" });\n      }\n\n      // Get cart items and calculate total\n      const cartItems = await storage.getCartItems(sessionId);\n      if (cartItems.length === 0) {\n        return res.status(400).json({ message: \"Cart is empty\" });\n      }\n\n      let total = 0;\n      const cartWithProducts = await Promise.all(\n        cartItems.map(async (item) => {\n          const product = await storage.getProduct(item.productId);\n          if (!product) {\n            throw new Error(`Product not found: ${item.productId}`);\n          }\n          const itemTotal = parseFloat(String(product.price)) * item.quantity;\n          total += itemTotal;\n          return { ...item, product, itemTotal };\n        })\n      );\n\n      // Create payment intent with calculated total\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(total * 100), // Convert to paisa (INR subunit)\n        currency: \"inr\",\n        metadata: {\n          sessionId,\n          items: JSON.stringify(cartWithProducts.map(item => ({\n            productId: item.productId,\n            quantity: item.quantity,\n            price: item.product.price\n          })))\n        }\n      });\n\n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        amount: total,\n        items: cartWithProducts\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12865},"server/storage.ts":{"content":"import { type User, type InsertUser, type Product, type InsertProduct, type Appointment, type InsertAppointment, type CartItem, type InsertCartItem, type Order, type InsertOrder, type UserSession, type InsertUserSession } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Product methods\n  getProducts(category?: string, featured?: boolean): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  searchProducts(query: string): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n\n  // Appointment methods\n  getAppointments(): Promise<Appointment[]>;\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointmentStatus(id: string, status: string): Promise<Appointment | undefined>;\n\n  // Cart methods\n  getCartItems(sessionId: string): Promise<CartItem[]>;\n  addToCart(item: InsertCartItem): Promise<CartItem>;\n  updateCartItemQuantity(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(id: string): Promise<boolean>;\n  clearCart(sessionId: string): Promise<void>;\n\n  // Order methods\n  createOrder(order: InsertOrder): Promise<Order>;\n  getOrder(id: string): Promise<Order | undefined>;\n  getUserOrders(userId: string): Promise<Order[]>;\n  updateOrderStatus(id: string, status: string): Promise<Order | undefined>;\n\n  // Session methods\n  createUserSession(session: InsertUserSession): Promise<UserSession>;\n  getUserSession(sessionToken: string): Promise<UserSession | undefined>;\n  deleteUserSession(sessionToken: string): Promise<boolean>;\n\n  // Auth helper methods\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserAppointments(userId: string): Promise<Appointment[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private products: Map<string, Product>;\n  private appointments: Map<string, Appointment>;\n  private cartItems: Map<string, CartItem>;\n  private orders: Map<string, Order>;\n  private sessions: Map<string, UserSession>;\n\n  constructor() {\n    this.users = new Map();\n    this.products = new Map();\n    this.appointments = new Map();\n    this.cartItems = new Map();\n    this.orders = new Map();\n    this.sessions = new Map();\n    this.initializeProducts();\n  }\n\n  private initializeProducts() {\n    const sampleProducts: Product[] = [\n      {\n        id: \"1\",\n        name: \"iPhone 15 Pro Max\",\n        description: \"Latest flagship iPhone with titanium design and advanced camera system\",\n        price: \"134900\",\n        originalPrice: \"159900\",\n        category: \"smartphones\",\n        imageUrl: \"https://images.unsplash.com/photo-1592750475338-74b7b21085ab?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        rating: \"4.8\",\n        reviewCount: 256,\n        inStock: true,\n        featured: true,\n        tags: [\"best-seller\", \"flagship\"],\n        specifications: {\n          display: \"6.7-inch Super Retina XDR\",\n          processor: \"A17 Pro chip\",\n          storage: \"256GB\",\n          camera: \"48MP Pro camera system\"\n        }\n      },\n      {\n        id: \"2\",\n        name: \"MacBook Pro M3\",\n        description: \"Professional laptop with M3 chip for ultimate performance\",\n        price: \"199900\",\n        originalPrice: \"219900\",\n        category: \"laptops\",\n        imageUrl: \"https://images.unsplash.com/photo-1541807084-5c52b6b3adef?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        rating: \"4.9\",\n        reviewCount: 189,\n        inStock: true,\n        featured: true,\n        tags: [\"editor-choice\", \"professional\"],\n        specifications: {\n          processor: \"Apple M3 chip\",\n          memory: \"16GB unified memory\",\n          storage: \"512GB SSD\",\n          display: \"14-inch Liquid Retina XDR\"\n        }\n      },\n      {\n        id: \"3\",\n        name: \"Sony WH-1000XM5\",\n        description: \"Industry-leading noise canceling wireless headphones\",\n        price: \"29990\",\n        originalPrice: \"34990\",\n        category: \"accessories\",\n        imageUrl: \"https://images.unsplash.com/photo-1583394838336-acd977736f90?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        rating: \"4.7\",\n        reviewCount: 421,\n        inStock: true,\n        featured: true,\n        tags: [\"trending\", \"audio\"],\n        specifications: {\n          driver: \"30mm drivers\",\n          battery: \"30 hours playback\",\n          connectivity: \"Bluetooth 5.2\",\n          features: \"Industry-leading noise canceling\"\n        }\n      },\n      {\n        id: \"4\",\n        name: \"Samsung Galaxy S24\",\n        description: \"Latest Samsung flagship with AI-powered photography\",\n        price: \"74999\",\n        originalPrice: \"79999\",\n        category: \"smartphones\",\n        imageUrl: \"https://images.unsplash.com/photo-1610945265064-0e34e5519bbf?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        rating: \"4.6\",\n        reviewCount: 334,\n        inStock: true,\n        featured: true,\n        tags: [\"new-arrival\", \"android\"],\n        specifications: {\n          display: \"6.2-inch Dynamic AMOLED 2X\",\n          processor: \"Snapdragon 8 Gen 3\",\n          storage: \"256GB\",\n          camera: \"50MP triple camera system\"\n        }\n      },\n      {\n        id: \"5\",\n        name: \"iPad Air M2\",\n        description: \"Powerful and versatile iPad with M2 chip\",\n        price: \"59900\",\n        originalPrice: \"69900\",\n        category: \"tablets\",\n        imageUrl: \"https://images.unsplash.com/photo-1544244015-0df4b3ffc6b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        rating: \"4.8\",\n        reviewCount: 167,\n        inStock: true,\n        featured: false,\n        tags: [\"deal-of-the-day\"],\n        specifications: {\n          display: \"10.9-inch Liquid Retina\",\n          processor: \"Apple M2 chip\",\n          storage: \"256GB\",\n          camera: \"12MP Wide camera\"\n        }\n      }\n    ];\n\n    sampleProducts.forEach(product => {\n      this.products.set(product.id, product);\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Product methods\n  async getProducts(category?: string, featured?: boolean): Promise<Product[]> {\n    let products = Array.from(this.products.values());\n    \n    if (category) {\n      products = products.filter(p => p.category === category);\n    }\n    \n    if (featured !== undefined) {\n      products = products.filter(p => p.featured === featured);\n    }\n    \n    return products;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    const lowercaseQuery = query.toLowerCase();\n    return Array.from(this.products.values()).filter(product =>\n      product.name.toLowerCase().includes(lowercaseQuery) ||\n      product.description.toLowerCase().includes(lowercaseQuery) ||\n      product.category.toLowerCase().includes(lowercaseQuery)\n    );\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = { \n      ...insertProduct, \n      id,\n      originalPrice: insertProduct.originalPrice || null,\n      rating: insertProduct.rating || null,\n      reviewCount: insertProduct.reviewCount || null,\n      inStock: insertProduct.inStock !== undefined ? insertProduct.inStock : null,\n      featured: insertProduct.featured !== undefined ? insertProduct.featured : null,\n      tags: insertProduct.tags || null,\n      specifications: insertProduct.specifications || null\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  // Appointment methods\n  async getAppointments(): Promise<Appointment[]> {\n    return Array.from(this.appointments.values());\n  }\n\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    return this.appointments.get(id);\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const id = randomUUID();\n    const appointment: Appointment = {\n      ...insertAppointment,\n      id,\n      userId: insertAppointment.userId || null,\n      status: \"pending\",\n      appointmentDate: null,\n      estimatedCost: null,\n      actualCost: null,\n      technicianNotes: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.appointments.set(id, appointment);\n    return appointment;\n  }\n\n  async updateAppointmentStatus(id: string, status: string): Promise<Appointment | undefined> {\n    const appointment = this.appointments.get(id);\n    if (appointment) {\n      const updated = { ...appointment, status };\n      this.appointments.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  // Cart methods\n  async getCartItems(sessionId: string): Promise<CartItem[]> {\n    return Array.from(this.cartItems.values()).filter(item => item.sessionId === sessionId);\n  }\n\n  async addToCart(insertItem: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart\n    const existingItem = Array.from(this.cartItems.values()).find(\n      item => item.sessionId === insertItem.sessionId && item.productId === insertItem.productId\n    );\n\n    if (existingItem) {\n      // Update quantity\n      const updated = { ...existingItem, quantity: existingItem.quantity + (insertItem.quantity || 1) };\n      this.cartItems.set(existingItem.id, updated);\n      return updated;\n    } else {\n      // Create new cart item\n      const id = randomUUID();\n      const cartItem: CartItem = {\n        ...insertItem,\n        id,\n        quantity: insertItem.quantity || 1,\n        addedAt: new Date()\n      };\n      this.cartItems.set(id, cartItem);\n      return cartItem;\n    }\n  }\n\n  async updateCartItemQuantity(id: string, quantity: number): Promise<CartItem | undefined> {\n    const item = this.cartItems.get(id);\n    if (item) {\n      const updated = { ...item, quantity };\n      this.cartItems.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  async removeFromCart(id: string): Promise<boolean> {\n    return this.cartItems.delete(id);\n  }\n\n  async clearCart(sessionId: string): Promise<void> {\n    const itemsToRemove = Array.from(this.cartItems.entries())\n      .filter(([_, item]) => item.sessionId === sessionId)\n      .map(([id, _]) => id);\n\n    itemsToRemove.forEach(id => this.cartItems.delete(id));\n  }\n\n  // Order methods\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const order: Order = {\n      ...insertOrder,\n      id,\n      status: insertOrder.status || \"pending\",\n      userId: insertOrder.userId || null,\n      sessionId: insertOrder.sessionId || null,\n      paymentIntentId: insertOrder.paymentIntentId || null,\n      shippingAddress: insertOrder.shippingAddress || null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(order => order.userId === userId);\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (order) {\n      const updated = { ...order, status, updatedAt: new Date() };\n      this.orders.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  // Session methods\n  async createUserSession(insertSession: InsertUserSession): Promise<UserSession> {\n    const id = randomUUID();\n    const session: UserSession = {\n      ...insertSession,\n      id,\n      createdAt: new Date()\n    };\n    this.sessions.set(session.sessionToken, session);\n    return session;\n  }\n\n  async getUserSession(sessionToken: string): Promise<UserSession | undefined> {\n    return this.sessions.get(sessionToken);\n  }\n\n  async deleteUserSession(sessionToken: string): Promise<boolean> {\n    return this.sessions.delete(sessionToken);\n  }\n\n  // Auth helper methods\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getUserAppointments(userId: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values()).filter(appt => appt.userId === userId);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":12956},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  category: text(\"category\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).default(\"0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  inStock: boolean(\"in_stock\").default(true),\n  featured: boolean(\"featured\").default(false),\n  tags: text(\"tags\").array(),\n  specifications: jsonb(\"specifications\"),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\").notNull(),\n  device: text(\"device\").notNull(),\n  issueDescription: text(\"issue_description\").notNull(),\n  status: text(\"status\").default(\"pending\"),\n  appointmentDate: timestamp(\"appointment_date\"),\n  estimatedCost: decimal(\"estimated_cost\", { precision: 10, scale: 2 }),\n  actualCost: decimal(\"actual_cost\", { precision: 10, scale: 2 }),\n  technicianNotes: text(\"technician_notes\"),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  sessionId: text(\"session_id\"), // For guest orders\n  status: text(\"status\").notNull().default(\"pending\"), // pending, paid, shipped, delivered, cancelled\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  gstAmount: decimal(\"gst_amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentIntentId: text(\"payment_intent_id\"),\n  shippingAddress: jsonb(\"shipping_address\"),\n  items: jsonb(\"items\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  sessionToken: text(\"session_token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull(),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  addedAt: timestamp(\"added_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  status: true,\n  appointmentDate: true,\n  createdAt: true,\n  updatedAt: true,\n  estimatedCost: true,\n  actualCost: true,\n  technicianNotes: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  addedAt: true,\n});\n\n// Auth schemas\nexport const loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\n","size_bytes":5485},"client/public/service-worker.js":{"content":"const CACHE_NAME = 'mobo-nyc-v1';\nconst urlsToCache = [\n  '/',\n  '/manifest.json',\n  '/icon-192.png',\n  '/icon-512.png'\n];\n\n// Install event\nself.addEventListener('install', (event) => {\n  console.log('Service worker installing...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n      .then(() => {\n        console.log('Service worker installed successfully');\n        return self.skipWaiting();\n      })\n  );\n});\n\n// Fetch event\nself.addEventListener('fetch', (event) => {\n  const url = new URL(event.request.url);\n  \n  // Cache strategy for different types of requests\n  if (url.pathname.startsWith('/api/')) {\n    // Check if this is a sensitive payment endpoint that should not be cached\n    const isPaymentEndpoint = url.pathname.includes('/create-payment-intent') || \n                              url.pathname.includes('/payment') ||\n                              url.pathname.includes('/stripe');\n    \n    if (isPaymentEndpoint) {\n      // Never cache payment endpoints - network only\n      event.respondWith(fetch(event.request));\n    } else {\n      // Network-first for other API calls\n      event.respondWith(\n        fetch(event.request)\n          .then(response => {\n            const responseClone = response.clone();\n            caches.open(CACHE_NAME)\n              .then(cache => cache.put(event.request, responseClone));\n            return response;\n          })\n          .catch(() => caches.match(event.request))\n      );\n    }\n  } else if (url.pathname.startsWith('/assets/')) {\n    // Cache-first for static assets\n    event.respondWith(\n      caches.match(event.request)\n        .then(response => {\n          if (response) {\n            return response;\n          }\n          return fetch(event.request)\n            .then(response => {\n              const responseClone = response.clone();\n              caches.open(CACHE_NAME)\n                .then(cache => cache.put(event.request, responseClone));\n              return response;\n            });\n        })\n    );\n  } else {\n    // Default cache-first strategy for other requests\n    event.respondWith(\n      caches.match(event.request)\n        .then((response) => {\n          if (response) {\n            return response;\n          }\n          return fetch(event.request);\n        })\n    );\n  }\n});\n\n// Activate event\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Background sync for offline form submissions\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync') {\n    event.waitUntil(doBackgroundSync());\n  }\n});\n\nfunction doBackgroundSync() {\n  // Handle offline form submissions when back online\n  return new Promise((resolve) => {\n    // Implementation would sync offline data\n    resolve();\n  });\n}\n","size_bytes":3147},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport Home from \"@/pages/home\";\nimport Marketplace from \"@/pages/marketplace\";\nimport Repairs from \"@/pages/repairs\";\nimport Cart from \"@/pages/cart\";\nimport Checkout from \"@/pages/checkout\";\nimport OrderConfirmation from \"@/pages/order-confirmation\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport Account from \"@/pages/account\";\nimport NotFound from \"@/pages/not-found\";\nimport Header from \"@/components/header\";\nimport FloatingNav from \"@/components/floating-nav\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/marketplace\" component={Marketplace} />\n      <Route path=\"/repairs\" component={Repairs} />\n      <Route path=\"/cart\" component={Cart} />\n      <Route path=\"/checkout\" component={Checkout} />\n      <Route path=\"/order-confirmation\" component={OrderConfirmation} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/account\" component={Account} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-background text-foreground\">\n            <Header />\n            <main className=\"pb-20 lg:pb-0\">\n              <Router />\n            </main>\n            <FloatingNav />\n            <Toaster />\n          </div>\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1878},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 47%, 11%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 47%, 11%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(222, 47%, 20%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(222, 47%, 15%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(222, 47%, 20%);\n  --input: hsl(222, 47%, 20%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(222, 47%, 11%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(222, 47%, 15%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(222, 47%, 20%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 47%, 11%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 47%, 11%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(222, 47%, 20%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(222, 47%, 15%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(222, 47%, 20%);\n  --input: hsl(222, 47%, 20%);\n  --ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .gradient-bg {\n    background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);\n  }\n  \n  .glass-card {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .pulse-ring {\n    animation: pulse 2s infinite;\n  }\n  \n  @keyframes pulse {\n    0% {\n      transform: scale(0.95);\n      box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);\n    }\n    70% {\n      transform: scale(1);\n      box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);\n    }\n    100% {\n      transform: scale(0.95);\n      box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);\n    }\n  }\n  \n  .countdown-timer {\n    font-variant-numeric: tabular-nums;\n  }\n  \n  .touch-feedback:active {\n    transform: scale(0.98);\n    transition: transform 0.1s ease;\n  }\n  \n  .floating-nav {\n    box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.3);\n    backdrop-filter: blur(20px);\n  }\n}\n","size_bytes":3288},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Register service worker for PWA functionality\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/service-worker.js')\n      .then((registration) => {\n        console.log('SW registered: ', registration);\n      })\n      .catch((registrationError) => {\n        console.log('SW registration failed: ', registrationError);\n      });\n  });\n}\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":563},"client/src/components/deal-of-the-day.tsx":{"content":"import { Product } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useCountdown } from \"@/hooks/use-countdown\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Star, ShoppingCart } from \"lucide-react\";\nimport { useMemo } from \"react\";\n\ninterface DealOfTheDayProps {\n  product: Product;\n}\n\nexport default function DealOfTheDay({ product }: DealOfTheDayProps) {\n  const { addToCart } = useCart();\n  const { toast } = useToast();\n  \n  // Set end time to 23:45:12 from now (matching the design) - memoize to prevent re-renders\n  const endTime = useMemo(() => {\n    const end = new Date();\n    end.setHours(end.getHours() + 23);\n    end.setMinutes(end.getMinutes() + 45);\n    end.setSeconds(end.getSeconds() + 12);\n    return end;\n  }, []);\n  \n  const { timeLeft, isExpired } = useCountdown(endTime);\n\n  const handleAddToCart = async () => {\n    try {\n      await addToCart(product.id, 1);\n      toast({\n        title: \"Added to cart\",\n        description: `${product.name} has been added to your cart`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const discountPercentage = product.originalPrice \n    ? Math.round(((parseFloat(product.originalPrice) - parseFloat(product.price)) / parseFloat(product.originalPrice)) * 100)\n    : 0;\n\n  if (isExpired) {\n    return null;\n  }\n\n  return (\n    <div className=\"text-center\">\n      <h2 className=\"text-2xl font-bold mb-6\">Deal of the Day</h2>\n      \n      <Card className=\"max-w-md mx-auto\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center mb-4\">\n            <div className=\"text-sm text-muted-foreground mb-2\">Ends in</div>\n            <div \n              className=\"countdown-timer text-2xl font-bold text-primary\" \n              data-testid=\"countdown-timer\"\n            >\n              {timeLeft.hours.toString().padStart(2, '0')}:\n              {timeLeft.minutes.toString().padStart(2, '0')}:\n              {timeLeft.seconds.toString().padStart(2, '0')}\n            </div>\n          </div>\n          \n          <img \n            src={product.imageUrl} \n            alt={product.name}\n            className=\"w-full h-48 object-cover rounded-lg mb-4\"\n            data-testid=\"deal-product-image\"\n          />\n          \n          <div className=\"text-center\">\n            <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"deal-product-name\">\n              {product.name}\n            </h3>\n            \n            <div className=\"flex items-center justify-center mb-2\">\n              <div className=\"flex text-yellow-400 mr-2\">\n                {[...Array(5)].map((_, i) => (\n                  <Star \n                    key={i} \n                    className={`h-4 w-4 ${i < Math.floor(parseFloat(product.rating || \"0\")) ? \"fill-current\" : \"\"}`} \n                  />\n                ))}\n              </div>\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"deal-product-rating\">\n                ({product.rating})\n              </span>\n            </div>\n            \n            <div className=\"flex items-center justify-center gap-2 mb-4\">\n              <span className=\"text-2xl font-bold text-primary\" data-testid=\"deal-product-price\">\n                â‚¹{parseFloat(product.price).toLocaleString()}\n              </span>\n              {product.originalPrice && (\n                <span className=\"text-lg text-muted-foreground line-through\" data-testid=\"deal-product-original-price\">\n                  â‚¹{parseFloat(product.originalPrice).toLocaleString()}\n                </span>\n              )}\n              {discountPercentage > 0 && (\n                <Badge className=\"bg-accent text-accent-foreground\" data-testid=\"deal-discount-badge\">\n                  -{discountPercentage}%\n                </Badge>\n              )}\n            </div>\n            \n            <Button \n              className=\"w-full touch-feedback\" \n              onClick={handleAddToCart}\n              disabled={!product.inStock}\n              data-testid=\"button-deal-add-to-cart\"\n            >\n              <ShoppingCart className=\"mr-2 h-4 w-4\" />\n              Add to Cart\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4483},"client/src/components/floating-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { Button } from \"@/components/ui/button\";\nimport { Home, Store, Wrench, ShoppingCart, User } from \"lucide-react\";\n\nexport default function FloatingNav() {\n  const [location] = useLocation();\n  const { cartItemCount } = useCart();\n\n  const navigation = [\n    { name: \"Home\", href: \"/\", icon: Home },\n    { name: \"Shop\", href: \"/marketplace\", icon: Store },\n    { name: \"Repair\", href: \"/repairs\", icon: Wrench },\n    { name: \"Cart\", href: \"/cart\", icon: ShoppingCart, badge: cartItemCount },\n    { name: \"Profile\", href: \"/profile\", icon: User },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-card/95 floating-nav border-t border-border lg:hidden z-50\">\n      <div className=\"grid grid-cols-5 h-16\">\n        {navigation.map((item) => {\n          const IconComponent = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <Button\n                variant=\"ghost\"\n                className={`h-full w-full flex flex-col items-center justify-center relative touch-feedback ${\n                  isActive ? \"text-primary\" : \"text-muted-foreground hover:text-foreground\"\n                }`}\n                data-testid={`nav-floating-${item.name.toLowerCase()}`}\n              >\n                <IconComponent className=\"h-5 w-5 mb-1\" />\n                <span className=\"text-xs\">{item.name}</span>\n                \n                {item.badge && item.badge > 0 && (\n                  <span \n                    className=\"absolute top-1 right-3 bg-primary text-primary-foreground text-xs rounded-full h-4 w-4 flex items-center justify-center\"\n                    data-testid={`nav-badge-${item.name.toLowerCase()}`}\n                  >\n                    {item.badge}\n                  </span>\n                )}\n              </Button>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2031},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { usePWA } from \"@/lib/pwa-utils\";\nimport { \n  Menu, \n  Search, \n  ShoppingCart, \n  Download,\n  Home,\n  Store,\n  Wrench,\n  User,\n  LogIn,\n  LogOut,\n  UserPlus\n} from \"lucide-react\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [searchOpen, setSearchOpen] = useState(false);\n  const { cartItemCount } = useCart();\n  const { user, logout } = useAuth();\n  const { canInstall, installPWA } = usePWA();\n\n  const navigation = [\n    { name: \"Home\", href: \"/\", icon: Home },\n    { name: \"Marketplace\", href: \"/marketplace\", icon: Store },\n    { name: \"Repairs\", href: \"/repairs\", icon: Wrench },\n    { name: \"Contact\", href: \"#contact\", icon: User },\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 bg-card/80 backdrop-blur-lg border-b border-border\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {/* Mobile Menu */}\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  className=\"lg:hidden\" \n                  data-testid=\"button-menu\"\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"left\" className=\"w-72\">\n                <div className=\"flex flex-col space-y-4 mt-6\">\n                  {navigation.map((item) => {\n                    const IconComponent = item.icon;\n                    return (\n                      <Link key={item.name} href={item.href}>\n                        <Button \n                          variant=\"ghost\" \n                          className=\"w-full justify-start\"\n                          data-testid={`nav-mobile-${item.name.toLowerCase()}`}\n                        >\n                          <IconComponent className=\"mr-2 h-4 w-4\" />\n                          {item.name}\n                        </Button>\n                      </Link>\n                    );\n                  })}\n                </div>\n              </SheetContent>\n            </Sheet>\n\n            {/* Logo */}\n            <Link href=\"/\">\n              <h1 className=\"text-xl font-bold gradient-bg bg-clip-text text-transparent cursor-pointer\" data-testid=\"logo\">\n                MOBO NYC\n              </h1>\n            </Link>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-6\">\n            {navigation.map((item) => (\n              <Link key={item.name} href={item.href}>\n                <Button \n                  variant=\"ghost\"\n                  className={location === item.href ? \"text-primary\" : \"text-muted-foreground hover:text-foreground\"}\n                  data-testid={`nav-desktop-${item.name.toLowerCase()}`}\n                >\n                  {item.name}\n                </Button>\n              </Link>\n            ))}\n          </nav>\n          \n          <div className=\"flex items-center space-x-2\">\n            {/* Search */}\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setSearchOpen(!searchOpen)}\n              data-testid=\"button-search\"\n            >\n              <Search className=\"h-5 w-5\" />\n            </Button>\n            \n            {/* Cart */}\n            <Link href=\"/cart\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"relative\"\n                data-testid=\"button-cart\"\n              >\n                <ShoppingCart className=\"h-5 w-5\" />\n                {cartItemCount > 0 && (\n                  <span \n                    className=\"absolute -top-1 -right-1 bg-primary text-primary-foreground text-xs rounded-full h-5 w-5 flex items-center justify-center\"\n                    data-testid=\"cart-item-count\"\n                  >\n                    {cartItemCount}\n                  </span>\n                )}\n              </Button>\n            </Link>\n            \n            {/* User Account */}\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-user-menu\"\n                  >\n                    <User className=\"h-5 w-5\" />\n                    <span className=\"hidden md:inline\">{user.username}</span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/account\" className=\"w-full cursor-pointer\" data-testid=\"nav-account\">\n                      <User className=\"mr-2 h-4 w-4\" />\n                      My Account\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    onClick={logout}\n                    className=\"cursor-pointer text-red-600 focus:text-red-600\"\n                    data-testid=\"nav-logout\"\n                  >\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Sign Out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <Link href=\"/login\">\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-login\">\n                    <LogIn className=\"h-4 w-4 mr-2\" />\n                    <span className=\"hidden md:inline\">Sign In</span>\n                  </Button>\n                </Link>\n                <Link href=\"/register\">\n                  <Button size=\"sm\" data-testid=\"button-register\">\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    <span className=\"hidden md:inline\">Sign Up</span>\n                  </Button>\n                </Link>\n              </div>\n            )}\n\n            {/* Install PWA */}\n            {canInstall && (\n              <Button \n                size=\"sm\"\n                onClick={installPWA}\n                className=\"hidden lg:inline-flex\"\n                data-testid=\"button-install-pwa\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Install App\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Search Bar */}\n        {searchOpen && (\n          <div className=\"mt-4 animate-in slide-in-from-top-2\">\n            <Input\n              placeholder=\"Search products...\"\n              className=\"w-full\"\n              autoFocus\n              onBlur={() => setSearchOpen(false)}\n              data-testid=\"input-header-search\"\n            />\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":7489},"client/src/components/product-card.tsx":{"content":"import { Product } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Star, ShoppingCart } from \"lucide-react\";\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport default function ProductCard({ product }: ProductCardProps) {\n  const { addToCart } = useCart();\n  const { toast } = useToast();\n\n  const handleAddToCart = async () => {\n    try {\n      await addToCart(product.id, 1);\n      toast({\n        title: \"Added to cart\",\n        description: `${product.name} has been added to your cart`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const discountPercentage = product.originalPrice \n    ? Math.round(((parseFloat(product.originalPrice) - parseFloat(product.price)) / parseFloat(product.originalPrice)) * 100)\n    : 0;\n\n  const getBadgeText = () => {\n    if (product.tags?.includes(\"best-seller\")) return \"Best Seller\";\n    if (product.tags?.includes(\"editor-choice\")) return \"Editor's Choice\";\n    if (product.tags?.includes(\"trending\")) return \"Trending\";\n    if (product.tags?.includes(\"new-arrival\")) return \"New Arrival\";\n    if (product.tags?.includes(\"deal-of-the-day\")) return \"Deal of the Day\";\n    return null;\n  };\n\n  const getBadgeVariant = () => {\n    if (product.tags?.includes(\"best-seller\")) return \"default\";\n    if (product.tags?.includes(\"editor-choice\")) return \"secondary\";\n    if (product.tags?.includes(\"trending\")) return \"outline\";\n    if (product.tags?.includes(\"new-arrival\")) return \"outline\";\n    return \"default\";\n  };\n\n  return (\n    <Card className=\"overflow-hidden hover:shadow-lg transition-shadow touch-feedback\" data-testid={`product-card-${product.id}`}>\n      <div className=\"relative\">\n        <img \n          src={product.imageUrl} \n          alt={product.name}\n          className=\"w-full h-48 object-cover\"\n          data-testid={`product-image-${product.id}`}\n        />\n        \n        <div className=\"absolute top-2 left-2 flex flex-col gap-1\">\n          {getBadgeText() && (\n            <Badge variant={getBadgeVariant()} className=\"text-xs\">\n              {getBadgeText()}\n            </Badge>\n          )}\n        </div>\n        \n        {discountPercentage > 0 && (\n          <Badge className=\"absolute top-2 right-2 bg-accent text-accent-foreground\">\n            -{discountPercentage}%\n          </Badge>\n        )}\n      </div>\n      \n      <CardContent className=\"p-4\">\n        <div className=\"text-xs text-muted-foreground mb-1 capitalize\" data-testid={`product-category-${product.id}`}>\n          {product.category}\n        </div>\n        \n        <h3 className=\"font-semibold mb-2 line-clamp-2\" data-testid={`product-name-${product.id}`}>\n          {product.name}\n        </h3>\n        \n        <div className=\"flex items-center mb-2\">\n          <div className=\"flex text-yellow-400 mr-2\">\n            {[...Array(5)].map((_, i) => (\n              <Star \n                key={i} \n                className={`h-3 w-3 ${i < Math.floor(parseFloat(product.rating || \"0\")) ? \"fill-current\" : \"\"}`} \n              />\n            ))}\n          </div>\n          <span className=\"text-xs text-muted-foreground\" data-testid={`product-rating-${product.id}`}>\n            ({product.rating}) {product.reviewCount} reviews\n          </span>\n        </div>\n        \n        <div className=\"flex items-center gap-2 mb-3\">\n          <span className=\"text-lg font-bold text-primary\" data-testid={`product-price-${product.id}`}>\n            â‚¹{parseFloat(product.price).toLocaleString()}\n          </span>\n          {product.originalPrice && (\n            <span className=\"text-sm text-muted-foreground line-through\" data-testid={`product-original-price-${product.id}`}>\n              â‚¹{parseFloat(product.originalPrice).toLocaleString()}\n            </span>\n          )}\n        </div>\n        \n        <Button \n          className=\"w-full touch-feedback\" \n          variant=\"secondary\"\n          onClick={handleAddToCart}\n          disabled={!product.inStock}\n          data-testid={`button-add-to-cart-${product.id}`}\n        >\n          <ShoppingCart className=\"mr-2 h-4 w-4\" />\n          {product.inStock ? \"Add to Cart\" : \"Out of Stock\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4513},"client/src/components/service-booking-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertAppointmentSchema, type InsertAppointment } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { CalendarCheck, Loader2 } from \"lucide-react\";\n\nexport default function ServiceBookingForm() {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<InsertAppointment>({\n    resolver: zodResolver(insertAppointmentSchema),\n    defaultValues: {\n      fullName: \"\",\n      phone: \"\",\n      email: \"\",\n      device: \"\",\n      issueDescription: \"\",\n    },\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: InsertAppointment) => {\n      return apiRequest(\"POST\", \"/api/appointments\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Appointment Booked!\",\n        description: \"We'll contact you shortly to confirm your appointment.\",\n      });\n      form.reset();\n      setIsSubmitting(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to book appointment. Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = async (data: InsertAppointment) => {\n    setIsSubmitting(true);\n    bookingMutation.mutate(data);\n  };\n\n  const deviceOptions = [\n    { value: \"smartphone\", label: \"Smartphone\" },\n    { value: \"laptop\", label: \"Laptop\" },\n    { value: \"tablet\", label: \"Tablet\" },\n    { value: \"desktop\", label: \"Desktop\" },\n    { value: \"gaming-console\", label: \"Gaming Console\" },\n    { value: \"other\", label: \"Other\" },\n  ];\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"fullName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Full Name</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Enter your full name\" \n                  {...field} \n                  data-testid=\"input-full-name\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"phone\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Phone Number</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"tel\" \n                  placeholder=\"Enter your phone number\" \n                  {...field} \n                  data-testid=\"input-phone\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email Address</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"email\" \n                  placeholder=\"Enter your email address\" \n                  {...field} \n                  data-testid=\"input-email\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"device\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Device Type</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-device\">\n                    <SelectValue placeholder=\"Select your device\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {deviceOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"issueDescription\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Issue Description</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Describe the issue with your device\"\n                  rows={4}\n                  {...field} \n                  data-testid=\"textarea-issue-description\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button \n          type=\"submit\" \n          className=\"w-full touch-feedback\" \n          disabled={isSubmitting}\n          data-testid=\"button-submit-booking\"\n        >\n          {isSubmitting ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Booking...\n            </>\n          ) : (\n            <>\n              <CalendarCheck className=\"mr-2 h-4 w-4\" />\n              Book Service Appointment\n            </>\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":5829},"client/src/hooks/use-cart.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Generate a session ID for the cart\nconst getSessionId = () => {\n  let sessionId = localStorage.getItem('cart-session-id');\n  if (!sessionId) {\n    sessionId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    localStorage.setItem('cart-session-id', sessionId);\n  }\n  return sessionId;\n};\n\nexport function useCart() {\n  const [sessionId] = useState(getSessionId);\n  const queryClient = useQueryClient();\n\n  const { data: cartItems = [] } = useQuery({\n    queryKey: ['/api/cart', sessionId],\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async ({ productId, quantity }: { productId: string; quantity: number }) => {\n      return apiRequest(\"POST\", \"/api/cart\", {\n        sessionId,\n        productId,\n        quantity,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"DELETE\", `/api/cart/clear/${sessionId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n  });\n\n  const addToCart = async (productId: string, quantity: number = 1) => {\n    return addToCartMutation.mutateAsync({ productId, quantity });\n  };\n\n  const clearCart = async () => {\n    return clearCartMutation.mutateAsync();\n  };\n\n  const cartItemCount = (cartItems as any[]).reduce((total: number, item: any) => total + item.quantity, 0);\n\n  return {\n    sessionId,\n    cartItems,\n    cartItemCount,\n    addToCart,\n    clearCart,\n    isAddingToCart: addToCartMutation.isPending,\n    isClearingCart: clearCartMutation.isPending,\n  };\n}\n","size_bytes":1883},"client/src/hooks/use-countdown.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface TimeLeft {\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\nexport function useCountdown(targetDate: Date) {\n  const [timeLeft, setTimeLeft] = useState<TimeLeft>({ hours: 0, minutes: 0, seconds: 0 });\n  const [isExpired, setIsExpired] = useState(false);\n\n  useEffect(() => {\n    const calculateTimeLeft = () => {\n      const now = new Date().getTime();\n      const target = targetDate.getTime();\n      const difference = target - now;\n\n      if (difference > 0) {\n        const hours = Math.floor(difference / (1000 * 60 * 60));\n        const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((difference % (1000 * 60)) / 1000);\n\n        setTimeLeft({ hours, minutes, seconds });\n        setIsExpired(false);\n      } else {\n        setTimeLeft({ hours: 0, minutes: 0, seconds: 0 });\n        setIsExpired(true);\n      }\n    };\n\n    // Calculate immediately\n    calculateTimeLeft();\n\n    // Set up interval\n    const timer = setInterval(calculateTimeLeft, 1000);\n\n    return () => clearInterval(timer);\n  }, [targetDate]);\n\n  return { timeLeft, isExpired };\n}\n","size_bytes":1177},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/pwa-utils.ts":{"content":"import { useState, useEffect } from \"react\";\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n}\n\nexport function usePWA() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [canInstall, setCanInstall] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n\n  useEffect(() => {\n    // Check if already installed\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n    const isInWebAppiOS = (window.navigator as any).standalone === true;\n    setIsInstalled(isStandalone || isInWebAppiOS);\n\n    // Listen for beforeinstallprompt event\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      const promptEvent = e as BeforeInstallPromptEvent;\n      setDeferredPrompt(promptEvent);\n      setCanInstall(true);\n    };\n\n    // Listen for appinstalled event\n    const handleAppInstalled = () => {\n      setDeferredPrompt(null);\n      setCanInstall(false);\n      setIsInstalled(true);\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const installPWA = async () => {\n    if (!deferredPrompt) return;\n\n    deferredPrompt.prompt();\n    const { outcome } = await deferredPrompt.userChoice;\n    \n    if (outcome === 'accepted') {\n      setDeferredPrompt(null);\n      setCanInstall(false);\n    }\n  };\n\n  return {\n    canInstall: canInstall && !isInstalled,\n    isInstalled,\n    installPWA,\n  };\n}\n\n// Register service worker\nexport function registerServiceWorker() {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker.register('/service-worker.js')\n        .then((registration) => {\n          console.log('SW registered: ', registration);\n        })\n        .catch((registrationError) => {\n          console.log('SW registration failed: ', registrationError);\n        });\n    });\n  }\n}\n\n// Check for app updates\nexport function checkForUpdates() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      window.location.reload();\n    });\n  }\n}\n","size_bytes":2504},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Extract the base URL and any query parameters\n    const [baseUrl, ...params] = queryKey;\n    let url = baseUrl as string;\n    \n    // If there are additional parameters, construct query string\n    if (params.length > 0) {\n      const queryParams = new URLSearchParams();\n      params.forEach(param => {\n        if (typeof param === 'object' && param !== null) {\n          Object.entries(param).forEach(([key, value]) => {\n            if (value !== undefined && value !== null) {\n              queryParams.append(key, String(value));\n            }\n          });\n        } else if (param !== undefined && param !== null) {\n          // For primitive values, append them as path segments\n          url += `/${param}`;\n        }\n      });\n      \n      // Add query string if we have query parameters\n      const queryString = queryParams.toString();\n      if (queryString) {\n        url += `?${queryString}`;\n      }\n    }\n\n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2285},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/cart.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Minus, Plus, Trash2, ShoppingBag } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface CartItemWithProduct {\n  id: string;\n  sessionId: string;\n  productId: string;\n  quantity: number;\n  addedAt: Date;\n  product: {\n    id: string;\n    name: string;\n    price: string;\n    imageUrl: string;\n    inStock: boolean;\n  };\n}\n\nexport default function Cart() {\n  const { sessionId } = useCart();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: cartItems, isLoading } = useQuery<CartItemWithProduct[]>({\n    queryKey: ['/api/cart', sessionId],\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ itemId, quantity }: { itemId: string; quantity: number }) => {\n      return apiRequest(\"PATCH\", `/api/cart/${itemId}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update quantity\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeItemMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      return apiRequest(\"DELETE\", `/api/cart/${itemId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n      toast({\n        title: \"Item removed\",\n        description: \"Item has been removed from your cart\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"DELETE\", `/api/cart/clear/${sessionId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n      toast({\n        title: \"Cart cleared\",\n        description: \"All items have been removed from your cart\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateQuantity = (itemId: string, newQuantity: number) => {\n    if (newQuantity < 1) return;\n    updateQuantityMutation.mutate({ itemId, quantity: newQuantity });\n  };\n\n  const removeItem = (itemId: string) => {\n    removeItemMutation.mutate(itemId);\n  };\n\n  const clearCart = () => {\n    clearCartMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-32 mb-6\"></div>\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"flex gap-4 mb-4\">\n              <div className=\"w-20 h-20 bg-muted rounded\"></div>\n              <div className=\"flex-1\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!cartItems || cartItems.length === 0) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <ShoppingBag className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold mb-2\">Your Cart is Empty</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            Looks like you haven't added any items to your cart yet.\n          </p>\n          <Link href=\"/marketplace\">\n            <Button data-testid=\"button-continue-shopping\">\n              Continue Shopping\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const subtotal = cartItems.reduce((sum, item) => {\n    return sum + (parseFloat(item.product.price) * item.quantity);\n  }, 0);\n\n  const tax = subtotal * 0.18; // 18% GST\n  const total = subtotal + tax;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h1 className=\"text-2xl font-bold\">Shopping Cart</h1>\n        {cartItems.length > 0 && (\n          <Button \n            variant=\"outline\" \n            onClick={clearCart}\n            disabled={clearCartMutation.isPending}\n            data-testid=\"button-clear-cart\"\n          >\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            Clear Cart\n          </Button>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Cart Items */}\n        <div className=\"lg:col-span-2 space-y-4\">\n          {cartItems.map((item) => (\n            <Card key={item.id}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex gap-4\">\n                  <img\n                    src={item.product.imageUrl}\n                    alt={item.product.name}\n                    className=\"w-20 h-20 object-cover rounded-lg\"\n                    data-testid={`cart-item-image-${item.id}`}\n                  />\n                  \n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold mb-1\" data-testid={`cart-item-name-${item.id}`}>\n                      {item.product.name}\n                    </h3>\n                    <p className=\"text-lg font-bold text-primary mb-2\" data-testid={`cart-item-price-${item.id}`}>\n                      â‚¹{parseFloat(item.product.price).toLocaleString()}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                          disabled={item.quantity <= 1 || updateQuantityMutation.isPending}\n                          data-testid={`button-decrease-quantity-${item.id}`}\n                        >\n                          <Minus className=\"h-3 w-3\" />\n                        </Button>\n                        \n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          value={item.quantity}\n                          onChange={(e) => {\n                            const qty = parseInt(e.target.value);\n                            if (qty > 0) updateQuantity(item.id, qty);\n                          }}\n                          className=\"w-16 text-center\"\n                          data-testid={`input-quantity-${item.id}`}\n                        />\n                        \n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                          disabled={updateQuantityMutation.isPending}\n                          data-testid={`button-increase-quantity-${item.id}`}\n                        >\n                          <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeItem(item.id)}\n                        disabled={removeItemMutation.isPending}\n                        data-testid={`button-remove-item-${item.id}`}\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Order Summary */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"sticky top-20\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-4\">Order Summary</h2>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal</span>\n                  <span data-testid=\"order-subtotal\">â‚¹{subtotal.toLocaleString()}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span>GST (18%)</span>\n                  <span data-testid=\"order-tax\">â‚¹{tax.toLocaleString()}</span>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex justify-between text-lg font-semibold\">\n                  <span>Total</span>\n                  <span data-testid=\"order-total\">â‚¹{total.toLocaleString()}</span>\n                </div>\n              </div>\n              \n              <Link href=\"/checkout\">\n                <Button className=\"w-full mt-6\" size=\"lg\" data-testid=\"button-checkout\">\n                  Proceed to Checkout\n                </Button>\n              </Link>\n              \n              <Link href=\"/marketplace\">\n                <Button variant=\"outline\" className=\"w-full mt-2\" data-testid=\"button-continue-shopping-summary\">\n                  Continue Shopping\n                </Button>\n              </Link>\n              \n              <div className=\"mt-4 text-xs text-muted-foreground\">\n                <p>â€¢ Free shipping on orders above â‚¹2,000</p>\n                <p>â€¢ 6 months warranty on all products</p>\n                <p>â€¢ 30-day return policy</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10085},"client/src/pages/checkout.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft } from 'lucide-react';\nimport { useCart } from '@/hooks/use-cart';\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY \n  ? loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY)\n  : null;\n\ninterface CheckoutFormProps {\n  onSuccess: () => void;\n  amount: number;\n}\n\nconst CheckoutForm = ({ onSuccess, amount }: CheckoutFormProps) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements || isProcessing) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.origin + '/order-confirmation',\n      },\n    });\n\n    setIsProcessing(false);\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message || \"An error occurred processing your payment\",\n        variant: \"destructive\",\n      });\n    } else {\n      // Payment succeeded, handled by return_url\n      onSuccess();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"form-payment\">\n      <div className=\"rounded-lg border bg-card p-4\">\n        <PaymentElement />\n      </div>\n      \n      <Button \n        type=\"submit\" \n        className=\"w-full\" \n        disabled={!stripe || !elements || isProcessing}\n        data-testid=\"button-pay\"\n      >\n        {isProcessing ? (\n          <>\n            <div className=\"animate-spin w-4 h-4 border-2 border-primary border-t-transparent rounded-full mr-2\" />\n            Processing...\n          </>\n        ) : (\n          `Pay â‚¹${amount.toFixed(2)}`\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Checkout() {\n  const [, setLocation] = useLocation();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [items, setItems] = useState<any[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const { sessionId, clearCart } = useCart();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!sessionId) {\n      setError(\"No session found\");\n      return;\n    }\n\n    // Create PaymentIntent as soon as the page loads\n    apiRequest(\"POST\", \"/api/create-payment-intent\", { sessionId })\n      .then((res) => res.json())\n      .then((data) => {\n        setClientSecret(data.clientSecret);\n        setAmount(data.amount);\n        setItems(data.items);\n      })\n      .catch((err) => {\n        console.error('Error creating payment intent:', err);\n        setError(\"Failed to initialize checkout. Please try again.\");\n      });\n  }, [sessionId]);\n\n  const handleSuccess = () => {\n    // Clear cart and invalidate queries\n    clearCart();\n    queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    \n    toast({\n      title: \"Payment Successful!\",\n      description: \"Thank you for your purchase. Your order is being processed.\",\n    });\n    \n    setLocation('/');\n  };\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 max-w-2xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-red-600\">Checkout Error</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">{error}</p>\n            <Button onClick={() => setLocation('/cart')} data-testid=\"button-back-to-cart\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Cart\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 max-w-2xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Loading Checkout...</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-2xl\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-4\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => setLocation('/cart')}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Cart\n          </Button>\n          <h1 className=\"text-3xl font-bold\">Checkout</h1>\n        </div>\n\n        {/* Order Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Order Summary</CardTitle>\n            <CardDescription>\n              Review your items before completing your purchase\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {items.map((item) => (\n                <div key={item.id} className=\"flex justify-between items-center py-2 border-b\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\" data-testid={`text-product-name-${item.productId}`}>\n                      {item.product.name}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Qty: {item.quantity} Ã— â‚¹{parseFloat(item.product.price).toFixed(2)}\n                    </p>\n                  </div>\n                  <div className=\"font-medium\" data-testid={`text-item-total-${item.productId}`}>\n                    â‚¹{item.itemTotal.toFixed(2)}\n                  </div>\n                </div>\n              ))}\n              <div className=\"flex justify-between items-center pt-4 text-lg font-bold\">\n                <span>Total</span>\n                <span data-testid=\"text-total-amount\">â‚¹{amount.toFixed(2)}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment Information</CardTitle>\n            <CardDescription>\n              Enter your payment details to complete your order\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {stripePromise ? (\n              <Elements stripe={stripePromise} options={{ clientSecret }}>\n                <CheckoutForm onSuccess={handleSuccess} amount={amount} />\n              </Elements>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground mb-4\">\n                  Payment processing is currently unavailable. Stripe configuration is missing.\n                </p>\n                <Button onClick={() => setLocation('/cart')} data-testid=\"button-back-to-cart-stripe\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Cart\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7787},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Product } from \"@shared/schema\";\nimport DealOfTheDay from \"@/components/deal-of-the-day\";\nimport ProductCard from \"@/components/product-card\";\nimport ServiceBookingForm from \"@/components/service-booking-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { \n  Smartphone, \n  Laptop, \n  Wrench, \n  Headphones,\n  Shield,\n  Users,\n  Clock,\n  Star,\n  MapPin,\n  Phone,\n  Mail,\n  CreditCard,\n  Gamepad2,\n  Monitor,\n  Zap,\n  Trophy\n} from \"lucide-react\";\n\nexport default function Home() {\n  const { data: featuredProducts, isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products', { featured: true }],\n  });\n\n  const { data: dealProduct } = useQuery<Product>({\n    queryKey: ['/api/products/5'], // iPad Air M2\n  });\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative py-8 lg:py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl lg:text-5xl font-bold mb-4\">Your Electronics Hub</h1>\n            <p className=\"text-lg text-muted-foreground mb-6\">Services â€¢ Marketplace â€¢ Repairs</p>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto mb-8\">\n              One-stop destination for all your electronics needs. Professional repair services, genuine parts, and complete marketplace for electronics.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n              <Link href=\"/repairs\">\n                <Button \n                  className=\"pulse-ring bg-primary text-primary-foreground hover:bg-primary/90\" \n                  data-testid=\"button-book-repair\"\n                >\n                  <Wrench className=\"mr-2 h-4 w-4\" />\n                  Book Repair\n                </Button>\n              </Link>\n              <Link href=\"/marketplace\">\n                <Button \n                  variant=\"secondary\" \n                  className=\"touch-feedback\" \n                  data-testid=\"button-browse-store\"\n                >\n                  <Smartphone className=\"mr-2 h-4 w-4\" />\n                  Browse Store\n                </Button>\n              </Link>\n            </div>\n          </div>\n          \n          {/* Service Stats */}\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-accent text-2xl font-bold\" data-testid=\"stat-warranty\">6 months</div>\n                <div className=\"text-sm text-muted-foreground\">Warranty</div>\n              </CardContent>\n            </Card>\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-accent text-2xl font-bold\" data-testid=\"stat-service\">Same day</div>\n                <div className=\"text-sm text-muted-foreground\">Fast Service</div>\n              </CardContent>\n            </Card>\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-accent text-2xl font-bold\" data-testid=\"stat-experience\">5+ years</div>\n                <div className=\"text-sm text-muted-foreground\">Expert Tech</div>\n              </CardContent>\n            </Card>\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-accent text-2xl font-bold\" data-testid=\"stat-rating\">4.9/5</div>\n                <div className=\"text-sm text-muted-foreground\">Rating</div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Access Categories */}\n      <section className=\"py-6\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-lg font-semibold mb-4\">Quick Access</h2>\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Link href=\"/marketplace?category=smartphones\">\n              <Card className=\"hover:bg-card/80 transition-colors touch-feedback cursor-pointer\" data-testid=\"category-smartphones\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-primary text-3xl mb-2 text-center\">\n                    <Smartphone className=\"mx-auto\" />\n                  </div>\n                  <div className=\"text-center font-medium\">Smartphones</div>\n                </CardContent>\n              </Card>\n            </Link>\n            <Link href=\"/marketplace?category=laptops\">\n              <Card className=\"hover:bg-card/80 transition-colors touch-feedback cursor-pointer\" data-testid=\"category-laptops\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-primary text-3xl mb-2 text-center\">\n                    <Laptop className=\"mx-auto\" />\n                  </div>\n                  <div className=\"text-center font-medium\">Laptops</div>\n                </CardContent>\n              </Card>\n            </Link>\n            <Link href=\"/repairs\">\n              <Card className=\"hover:bg-card/80 transition-colors touch-feedback cursor-pointer\" data-testid=\"category-repairs\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-primary text-3xl mb-2 text-center\">\n                    <Wrench className=\"mx-auto\" />\n                  </div>\n                  <div className=\"text-center font-medium\">Repairs</div>\n                </CardContent>\n              </Card>\n            </Link>\n            <Link href=\"/marketplace?category=accessories\">\n              <Card className=\"hover:bg-card/80 transition-colors touch-feedback cursor-pointer\" data-testid=\"category-accessories\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-primary text-3xl mb-2 text-center\">\n                    <Headphones className=\"mx-auto\" />\n                  </div>\n                  <div className=\"text-center font-medium\">Accessories</div>\n                </CardContent>\n              </Card>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Deal of the Day */}\n      {dealProduct && (\n        <section className=\"py-8\">\n          <div className=\"container mx-auto px-4\">\n            <DealOfTheDay product={dealProduct} />\n          </div>\n        </section>\n      )}\n\n      {/* Featured Products */}\n      <section className=\"py-8\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold\">Featured Products</h2>\n            <Link href=\"/marketplace\">\n              <Button variant=\"link\" className=\"text-primary hover:text-primary/80\" data-testid=\"link-view-all\">\n                View All â†’\n              </Button>\n            </Link>\n          </div>\n          \n          {isLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"bg-card rounded-xl h-80 animate-pulse\" />\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {featuredProducts?.map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-8\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-2xl font-bold mb-6 text-center\">Our Services</h2>\n          <p className=\"text-center text-muted-foreground mb-8\">\n            Comprehensive electronics solutions - from repair services to complete marketplace\n          </p>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"bg-primary/20 p-3 rounded-lg mr-4\">\n                    <Smartphone className=\"text-primary text-2xl\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-semibold\">Phone Repair Services</h3>\n                    <p className=\"text-muted-foreground\">Starting from â‚¹500</p>\n                  </div>\n                </div>\n                <p className=\"text-muted-foreground mb-4\">\n                  Complete mobile repair solutions including screen replacement, battery replacement, \n                  speaker & mic repair, network issues, water damage repair, charging port repair, \n                  and all other smartphone related services\n                </p>\n                \n                <div className=\"mb-4\">\n                  <h4 className=\"font-medium mb-2\">What's Included:</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>â€¢ Screen Replacement (LCD, OLED, AMOLED)</li>\n                    <li>â€¢ Battery Replacement with Warranty</li>\n                    <li>â€¢ Speaker & Microphone Repair</li>\n                    <li>â€¢ Network & Connectivity Issues</li>\n                  </ul>\n                </div>\n                \n                <Link href=\"/repairs\">\n                  <Button className=\"w-full\" data-testid=\"button-book-phone-repair\">\n                    <Clock className=\"mr-2 h-4 w-4\" />\n                    Book Repair\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"bg-accent/20 p-3 rounded-lg mr-4\">\n                    <Laptop className=\"text-accent text-2xl\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-semibold\">Electronics Marketplace</h3>\n                    <p className=\"text-muted-foreground\">Starting from â‚¹800</p>\n                  </div>\n                </div>\n                <p className=\"text-muted-foreground mb-4\">\n                  Your one-stop electronics marketplace offering computers, laptops, TVs, gaming consoles, \n                  home appliances, and custom PC builds with professional assembly and upgrade services\n                </p>\n                \n                <div className=\"mb-4\">\n                  <h4 className=\"font-medium mb-2\">What's Included:</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>â€¢ Computer Assembly & Custom Builds</li>\n                    <li>â€¢ Laptop & TV Repair Services</li>\n                    <li>â€¢ Gaming Console Repairs</li>\n                    <li>â€¢ Data Recovery Solutions</li>\n                  </ul>\n                </div>\n                \n                <Link href=\"/marketplace\">\n                  <Button className=\"w-full bg-accent text-accent-foreground hover:bg-accent/90\" data-testid=\"button-browse-electronics\">\n                    <Smartphone className=\"mr-2 h-4 w-4\" />\n                    Browse Electronics\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* PC Build Section */}\n      <section className=\"py-8 bg-muted/20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-2xl font-bold mb-4\">Build Your Dream PC</h2>\n            <p className=\"text-muted-foreground\">\n              Power meets precision. Experience high-performance builds with sleek aesthetics and optimized cooling for peak performance.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"hover:shadow-lg transition-shadow touch-feedback\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"bg-red-500/20 p-4 rounded-lg mb-4 mx-auto w-fit\">\n                  <Gamepad2 className=\"text-red-500 text-3xl\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Gaming Beast</h3>\n                <h4 className=\"text-lg font-bold mb-2\">Custom Gaming PC Build</h4>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  High-performance gaming rigs with RGB lighting and premium cooling\n                </p>\n                <div className=\"text-primary font-bold mb-4\">Starting from â‚¹45,000</div>\n                <Button \n                  className=\"w-full bg-red-500 text-white hover:bg-red-600\" \n                  data-testid=\"button-start-gaming-build\"\n                >\n                  Start Building\n                </Button>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover:shadow-lg transition-shadow touch-feedback\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"bg-blue-500/20 p-4 rounded-lg mb-4 mx-auto w-fit\">\n                  <Monitor className=\"text-blue-500 text-3xl\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Power Station</h3>\n                <h4 className=\"text-lg font-bold mb-2\">Workstation PCs</h4>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Professional workstations for content creation and productivity\n                </p>\n                <div className=\"text-primary font-bold mb-4\">Starting from â‚¹60,000</div>\n                <Button \n                  className=\"w-full bg-blue-500 text-white hover:bg-blue-600\" \n                  data-testid=\"button-start-workstation-build\"\n                >\n                  Start Building\n                </Button>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover:shadow-lg transition-shadow touch-feedback\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"bg-green-500/20 p-4 rounded-lg mb-4 mx-auto w-fit\">\n                  <Zap className=\"text-green-500 text-3xl\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Boost Power</h3>\n                <h4 className=\"text-lg font-bold mb-2\">Performance Upgrades</h4>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  CPU, GPU, RAM, SSD upgrades for existing systems\n                </p>\n                <div className=\"text-primary font-bold mb-4\">Starting from â‚¹8,000</div>\n                <Button \n                  className=\"w-full bg-green-500 text-white hover:bg-green-600\" \n                  data-testid=\"button-start-upgrade\"\n                >\n                  Start Building\n                </Button>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover:shadow-lg transition-shadow touch-feedback\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"bg-purple-500/20 p-4 rounded-lg mb-4 mx-auto w-fit\">\n                  <Trophy className=\"text-purple-500 text-3xl\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Console Gaming</h3>\n                <h4 className=\"text-lg font-bold mb-2\">Gaming Consoles</h4>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Latest PlayStation, Xbox and gaming accessories\n                </p>\n                <div className=\"text-primary font-bold mb-4\">Starting from â‚¹25,000</div>\n                <Button \n                  className=\"w-full bg-purple-500 text-white hover:bg-purple-600\" \n                  data-testid=\"button-start-console-build\"\n                >\n                  Start Building\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Why Choose Section */}\n      <section className=\"py-8\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-2xl font-bold mb-8 text-center\">Why Choose MOBO?</h2>\n          <p className=\"text-center text-muted-foreground mb-8\">\n            Your trusted electronics partner with years of experience in repair services and electronics marketplace. \n            We combine quality service with competitive prices.\n          </p>\n          \n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"stat-customers\">10,000+</div>\n              <div className=\"text-muted-foreground\">Happy Customers</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"stat-devices\">50,000+</div>\n              <div className=\"text-muted-foreground\">Devices Repaired</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"stat-service-time\">Same Day</div>\n              <div className=\"text-muted-foreground\">Service Available</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"stat-warranty-period\">6 Months</div>\n              <div className=\"text-muted-foreground\">Warranty Period</div>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"bg-primary/20 p-4 rounded-lg mb-4 mx-auto w-fit\">\n                <Shield className=\"text-primary text-2xl\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Quality Guarantee</h3>\n              <p className=\"text-muted-foreground\">6 months warranty on all repairs</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"bg-accent/20 p-4 rounded-lg mb-4 mx-auto w-fit\">\n                <Users className=\"text-accent text-2xl\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Expert Technicians</h3>\n              <p className=\"text-muted-foreground\">Certified professionals with 5+ years experience</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"bg-blue-500/20 p-4 rounded-lg mb-4 mx-auto w-fit\">\n                <Clock className=\"text-blue-500 text-2xl\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Fast Service</h3>\n              <p className=\"text-muted-foreground\">Same day repairs and quick marketplace delivery</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section className=\"py-8 bg-muted/20\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-2xl font-bold mb-8 text-center\">Get In Touch</h2>\n          <p className=\"text-center text-muted-foreground mb-8\">\n            Ready to fix your device or shop electronics? Contact us today for fast service.\n          </p>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Store Information */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-semibold mb-6\">Store Information</h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <MapPin className=\"text-primary mt-1\" />\n                    <div>\n                      <div className=\"font-medium\">Location</div>\n                      <div className=\"text-muted-foreground\" data-testid=\"store-location\">Western Hills, Baner, Pune</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <Phone className=\"text-primary mt-1\" />\n                    <div>\n                      <div className=\"font-medium\">Call Us</div>\n                      <div className=\"text-muted-foreground\" data-testid=\"store-phone\">+91 9373547424</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <Mail className=\"text-primary mt-1\" />\n                    <div>\n                      <div className=\"font-medium\">Email</div>\n                      <div className=\"text-muted-foreground\" data-testid=\"store-email\">info@moborepair.com</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <Clock className=\"text-primary mt-1\" />\n                    <div>\n                      <div className=\"font-medium\">Hours</div>\n                      <div className=\"text-muted-foreground\" data-testid=\"store-hours\">Mon-Sat: 9AM-8PM</div>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Payment Methods */}\n                <div className=\"mt-6 pt-6 border-t border-border\">\n                  <h4 className=\"font-medium mb-4\">Secure Payment Options</h4>\n                  <div className=\"grid grid-cols-2 gap-2 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center\">\n                      <CreditCard className=\"mr-2 text-primary h-4 w-4\" />\n                      Credit/Debit Cards\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Smartphone className=\"mr-2 text-primary h-4 w-4\" />\n                      UPI Payments\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Star className=\"mr-2 text-primary h-4 w-4\" />\n                      Cash on Service\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Users className=\"mr-2 text-primary h-4 w-4\" />\n                      Bank Transfer\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Service Booking Form */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-semibold mb-6\">Book Your Service</h3>\n                <ServiceBookingForm />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":22853},"client/src/pages/marketplace.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Product } from \"@shared/schema\";\nimport ProductCard from \"@/components/product-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter } from \"lucide-react\";\n\nexport default function Marketplace() {\n  const [search, setSearch] = useState(\"\");\n  const [category, setCategory] = useState(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products', { category: category === \"all\" ? undefined : category, search: searchQuery || undefined }],\n  });\n\n  const handleSearch = () => {\n    setSearchQuery(search);\n  };\n\n  const categories = [\n    { value: \"all\", label: \"All Categories\" },\n    { value: \"smartphones\", label: \"Smartphones\" },\n    { value: \"laptops\", label: \"Laptops\" },\n    { value: \"tablets\", label: \"Tablets\" },\n    { value: \"accessories\", label: \"Accessories\" },\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-4\">Electronics Marketplace</h1>\n        <p className=\"text-muted-foreground mb-6\">\n          Discover the latest electronics with competitive prices and quality guarantee\n        </p>\n\n        {/* Search and Filter */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 flex gap-2\">\n            <Input\n              placeholder=\"Search products...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n              className=\"flex-1\"\n              data-testid=\"input-search\"\n            />\n            <Button onClick={handleSearch} data-testid=\"button-search\">\n              <Search className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <Select value={category} onValueChange={setCategory}>\n            <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-category\">\n              <SelectValue placeholder=\"Category\" />\n            </SelectTrigger>\n            <SelectContent>\n              {categories.map((cat) => (\n                <SelectItem key={cat.value} value={cat.value}>\n                  {cat.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Category Pills */}\n        <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4 mb-8\">\n          <Button\n            variant={category === \"smartphones\" ? \"default\" : \"outline\"}\n            onClick={() => setCategory(\"smartphones\")}\n            className=\"h-16 flex flex-col\"\n            data-testid=\"category-pill-smartphones\"\n          >\n            <span className=\"text-lg mb-1\">ðŸ“±</span>\n            <span className=\"text-sm\">Smartphones</span>\n            <span className=\"text-xs text-muted-foreground\">Starting â‚¹8,999</span>\n          </Button>\n          \n          <Button\n            variant={category === \"laptops\" ? \"default\" : \"outline\"}\n            onClick={() => setCategory(\"laptops\")}\n            className=\"h-16 flex flex-col\"\n            data-testid=\"category-pill-laptops\"\n          >\n            <span className=\"text-lg mb-1\">ðŸ’»</span>\n            <span className=\"text-sm\">Laptops</span>\n            <span className=\"text-xs text-muted-foreground\">Starting â‚¹25,999</span>\n          </Button>\n          \n          <Button\n            variant={category === \"accessories\" ? \"default\" : \"outline\"}\n            onClick={() => setCategory(\"accessories\")}\n            className=\"h-16 flex flex-col\"\n            data-testid=\"category-pill-audio\"\n          >\n            <span className=\"text-lg mb-1\">ðŸŽ§</span>\n            <span className=\"text-sm\">Audio</span>\n            <span className=\"text-xs text-muted-foreground\">Starting â‚¹999</span>\n          </Button>\n          \n          <Button\n            variant={category === \"accessories\" ? \"default\" : \"outline\"}\n            onClick={() => setCategory(\"accessories\")}\n            className=\"h-16 flex flex-col\"\n            data-testid=\"category-pill-accessories\"\n          >\n            <span className=\"text-lg mb-1\">ðŸ”Œ</span>\n            <span className=\"text-sm\">Accessories</span>\n            <span className=\"text-xs text-muted-foreground\">Starting â‚¹299</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Products Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {[...Array(8)].map((_, i) => (\n            <div key={i} className=\"bg-card rounded-xl h-96 animate-pulse\" />\n          ))}\n        </div>\n      ) : products && products.length > 0 ? (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {products.map((product) => (\n            <ProductCard key={product.id} product={product} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <Filter className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No products found</h3>\n          <p className=\"text-muted-foreground\">\n            Try adjusting your search criteria or browse different categories\n          </p>\n          <Button \n            onClick={() => {\n              setSearch(\"\");\n              setSearchQuery(\"\");\n              setCategory(\"all\");\n            }}\n            className=\"mt-4\"\n            data-testid=\"button-clear-filters\"\n          >\n            Clear Filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5851},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/repairs.tsx":{"content":"import ServiceBookingForm from \"@/components/service-booking-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Smartphone, \n  Laptop, \n  Tablet,\n  Monitor,\n  Headphones,\n  Gamepad2,\n  Shield,\n  Clock,\n  Star,\n  CheckCircle,\n  Wrench,\n  Settings,\n  Cpu,\n  HardDrive\n} from \"lucide-react\";\n\nexport default function Repairs() {\n  const services = [\n    {\n      icon: Smartphone,\n      title: \"Smartphone Repair\",\n      description: \"Complete mobile device repair services\",\n      price: \"Starting â‚¹500\",\n      features: [\n        \"Screen Replacement (LCD, OLED, AMOLED)\",\n        \"Battery Replacement with Warranty\",\n        \"Speaker & Microphone Repair\",\n        \"Camera & Flash Issues\",\n        \"Water Damage Repair\",\n        \"Charging Port & Cable Issues\",\n        \"Software & OS Problems\",\n        \"Network & Connectivity Issues\"\n      ],\n      color: \"blue\"\n    },\n    {\n      icon: Laptop,\n      title: \"Laptop & Computer Repair\",\n      description: \"Professional computer repair and maintenance\",\n      price: \"Starting â‚¹800\",\n      features: [\n        \"Hardware Diagnostics & Repair\",\n        \"Screen & Keyboard Replacement\",\n        \"RAM & Storage Upgrades\",\n        \"Motherboard Repair\",\n        \"Cooling System Cleaning\",\n        \"Software Installation & Setup\",\n        \"Virus Removal & Security\",\n        \"Data Recovery Services\"\n      ],\n      color: \"green\"\n    },\n    {\n      icon: Tablet,\n      title: \"Tablet Repair\",\n      description: \"iPad and Android tablet repair services\",\n      price: \"Starting â‚¹600\",\n      features: [\n        \"Touchscreen Replacement\",\n        \"Battery Replacement\",\n        \"Charging Port Repair\",\n        \"Speaker & Audio Issues\",\n        \"Camera Problems\",\n        \"Software Troubleshooting\",\n        \"Water Damage Assessment\",\n        \"Case & Frame Repair\"\n      ],\n      color: \"purple\"\n    },\n    {\n      icon: Gamepad2,\n      title: \"Gaming Console Repair\",\n      description: \"PlayStation, Xbox, and Nintendo repairs\",\n      price: \"Starting â‚¹1000\",\n      features: [\n        \"Controller Repair & Replacement\",\n        \"HDMI Port Issues\",\n        \"Overheating Problems\",\n        \"Disc Drive Repair\",\n        \"Network Connectivity\",\n        \"Software Updates\",\n        \"Storage Upgrades\",\n        \"Performance Optimization\"\n      ],\n      color: \"red\"\n    }\n  ];\n\n  const whyChooseUs = [\n    {\n      icon: Shield,\n      title: \"6 Months Warranty\",\n      description: \"All repairs come with comprehensive warranty coverage\"\n    },\n    {\n      icon: Clock,\n      title: \"Same Day Service\",\n      description: \"Most repairs completed within 24 hours\"\n    },\n    {\n      icon: Star,\n      title: \"Expert Technicians\",\n      description: \"Certified professionals with 5+ years experience\"\n    },\n    {\n      icon: CheckCircle,\n      title: \"Genuine Parts\",\n      description: \"We use only authentic parts and components\"\n    }\n  ];\n\n  const repairProcess = [\n    {\n      step: 1,\n      title: \"Free Diagnosis\",\n      description: \"Quick 30-minute inspection to identify the issue\",\n      icon: Settings\n    },\n    {\n      step: 2,\n      title: \"Quote & Approval\",\n      description: \"Transparent pricing with no hidden costs\",\n      icon: Cpu\n    },\n    {\n      step: 3,\n      title: \"Expert Repair\",\n      description: \"Skilled technicians fix your device\",\n      icon: Wrench\n    },\n    {\n      step: 4,\n      title: \"Quality Testing\",\n      description: \"Thorough testing before device return\",\n      icon: HardDrive\n    }\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Hero Section */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-3xl lg:text-4xl font-bold mb-4\">Professional Electronics Repair</h1>\n        <p className=\"text-lg text-muted-foreground mb-6 max-w-2xl mx-auto\">\n          Expert repair services for all your electronic devices. Fast, reliable, and backed by warranty.\n        </p>\n        \n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 max-w-2xl mx-auto\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"repair-stat-warranty\">6 Months</div>\n            <div className=\"text-sm text-muted-foreground\">Warranty</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"repair-stat-time\">Same Day</div>\n            <div className=\"text-sm text-muted-foreground\">Service</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"repair-stat-experience\">5+ Years</div>\n            <div className=\"text-sm text-muted-foreground\">Experience</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"repair-stat-rating\">4.9/5</div>\n            <div className=\"text-sm text-muted-foreground\">Rating</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Repair Services */}\n      <section className=\"mb-12\">\n        <h2 className=\"text-2xl font-bold mb-8 text-center\">Our Repair Services</h2>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {services.map((service, index) => {\n            const IconComponent = service.icon;\n            return (\n              <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-4\">\n                    <div className={`p-3 rounded-lg bg-${service.color}-500/20`}>\n                      <IconComponent className={`h-6 w-6 text-${service.color}-500`} />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-xl\">{service.title}</CardTitle>\n                      <p className=\"text-muted-foreground\">{service.description}</p>\n                      <p className=\"text-primary font-semibold\">{service.price}</p>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <h4 className=\"font-medium mb-3\">Services Included:</h4>\n                  <ul className=\"space-y-2\">\n                    {service.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-start gap-2 text-sm\">\n                        <CheckCircle className=\"h-4 w-4 text-accent mt-0.5 flex-shrink-0\" />\n                        <span>{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  <Button \n                    className=\"w-full mt-4\" \n                    data-testid={`button-book-${service.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    Book {service.title}\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </section>\n\n      {/* Repair Process */}\n      <section className=\"mb-12\">\n        <h2 className=\"text-2xl font-bold mb-8 text-center\">Our Repair Process</h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {repairProcess.map((step, index) => {\n            const IconComponent = step.icon;\n            return (\n              <Card key={index} className=\"text-center\">\n                <CardContent className=\"p-6\">\n                  <div className=\"bg-primary/20 p-4 rounded-lg mb-4 mx-auto w-fit\">\n                    <IconComponent className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div className=\"text-sm text-primary font-semibold mb-2\">Step {step.step}</div>\n                  <h3 className=\"font-semibold mb-2\">{step.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{step.description}</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </section>\n\n      {/* Why Choose Us */}\n      <section className=\"mb-12\">\n        <h2 className=\"text-2xl font-bold mb-8 text-center\">Why Choose Our Repair Service?</h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {whyChooseUs.map((reason, index) => {\n            const IconComponent = reason.icon;\n            return (\n              <Card key={index} className=\"text-center\">\n                <CardContent className=\"p-6\">\n                  <div className=\"bg-accent/20 p-4 rounded-lg mb-4 mx-auto w-fit\">\n                    <IconComponent className=\"h-6 w-6 text-accent\" />\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">{reason.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{reason.description}</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </section>\n\n      {/* Booking Form */}\n      <section>\n        <h2 className=\"text-2xl font-bold mb-8 text-center\">Book Your Repair Service</h2>\n        \n        <div className=\"max-w-2xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <ServiceBookingForm />\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":9346},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nMOBO NYC is a modern electronics hub that combines repair services with an e-commerce marketplace. Built as a Progressive Web App (PWA), it serves as a one-stop destination for electronics repair services and product sales. The application features a dual-purpose platform where users can book repair appointments for their devices and browse/purchase electronics products.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React + TypeScript**: Modern component-based UI with type safety\n- **Vite**: Fast development build tool with hot module replacement\n- **Tailwind CSS + shadcn/ui**: Utility-first styling with pre-built components\n- **Wouter**: Lightweight client-side routing\n- **React Query (TanStack Query)**: Server state management and caching\n- **React Hook Form + Zod**: Form handling with schema validation\n\n## Backend Architecture\n- **Express.js**: RESTful API server with middleware support\n- **TypeScript**: Full-stack type safety\n- **Session-based storage**: In-memory storage with planned database migration\n- **Modular routing**: Organized API endpoints for products, appointments, and cart\n\n## Data Layer\n- **Drizzle ORM**: Type-safe database toolkit configured for PostgreSQL\n- **PostgreSQL**: Primary database (configured but using in-memory storage currently)\n- **Schema-first design**: Shared TypeScript schemas between frontend and backend\n- **Migration support**: Database versioning with Drizzle Kit\n\n## Authentication & Sessions\n- **Session-based cart**: Browser localStorage for cart session management\n- **No user authentication**: Currently operates without user accounts\n- **Guest checkout**: Streamlined purchase flow without registration\n\n## External Dependencies\n\n### Payment Processing\n- **Stripe**: Complete payment infrastructure with Stripe Elements for secure card processing\n- **Payment intents**: Server-side payment confirmation with webhook support\n\n### Database & Hosting\n- **Neon Database**: Serverless PostgreSQL database service\n- **Environment-based configuration**: Separate development and production database connections\n\n### UI & Styling\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Google Fonts**: Custom font loading (Inter, DM Sans, Fira Code, Geist Mono)\n- **Lucide React**: Consistent icon library\n\n### Development Tools\n- **Replit Integration**: Development environment optimizations\n- **ESBuild**: Production bundling for server-side code\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n\n### Progressive Web App\n- **Service Worker**: Offline capability and caching strategy\n- **Web App Manifest**: Native app-like experience on mobile devices\n- **Installation prompts**: PWA installation detection and prompts","size_bytes":2808},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (username: string, email: string, password: string, confirmPassword: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const sessionToken = localStorage.getItem('sessionToken');\n      if (!sessionToken) {\n        setIsLoading(false);\n        return;\n      }\n\n      const response = await fetch('/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        }\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n      } else {\n        localStorage.removeItem('sessionToken');\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      localStorage.removeItem('sessionToken');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    const response = await apiRequest('POST', '/api/auth/login', { email, password });\n    const data = await response.json();\n    localStorage.setItem('sessionToken', data.sessionToken);\n    setUser(data.user);\n  };\n\n  const register = async (username: string, email: string, password: string, confirmPassword: string) => {\n    const response = await apiRequest('POST', '/api/auth/register', { username, email, password, confirmPassword });\n    const data = await response.json();\n    localStorage.setItem('sessionToken', data.sessionToken);\n    setUser(data.user);\n  };\n\n  const logout = async () => {\n    try {\n      const sessionToken = localStorage.getItem('sessionToken');\n      if (sessionToken) {\n        await apiRequest('POST', '/api/auth/logout', { sessionToken });\n      }\n    } catch (error) {\n      console.error('Logout failed:', error);\n    } finally {\n      localStorage.removeItem('sessionToken');\n      setUser(null);\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isLoading,\n    login,\n    register,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n}","size_bytes":2843},"client/src/pages/account.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { User, Package, Wrench, LogOut, ShoppingBag, Calendar } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Order {\n  id: string;\n  status: string;\n  totalAmount: string;\n  gstAmount: string;\n  items: any[];\n  createdAt: string;\n}\n\ninterface Appointment {\n  id: string;\n  device: string;\n  issueDescription: string;\n  status: string;\n  appointmentDate: string | null;\n  estimatedCost: string | null;\n  actualCost: string | null;\n  technicianNotes: string | null;\n  createdAt: string;\n}\n\nexport default function Account() {\n  const { user, logout, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  // Redirect to login if not authenticated\n  if (!authLoading && !user) {\n    navigate(\"/login\");\n    return null;\n  }\n\n  // Show loading while checking auth\n  if (authLoading || !user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const { data: orders, isLoading: ordersLoading } = useQuery<Order[]>({\n    queryKey: ['/api/user/orders'],\n    enabled: !!user\n  });\n\n  const { data: appointments, isLoading: appointmentsLoading } = useQuery<Appointment[]>({\n    queryKey: ['/api/user/appointments'],\n    enabled: !!user\n  });\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"Signed out\",\n        description: \"You've been successfully signed out.\",\n      });\n      navigate(\"/\");\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to sign out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      case 'paid':\n      case 'completed':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'shipped':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      case 'delivered':\n        return 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'in-progress':\n        return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-2 bg-primary/10 rounded-full\">\n            <User className=\"h-6 w-6 text-primary\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold\">My Account</h1>\n            <p className=\"text-muted-foreground\">Welcome back, {user.username}!</p>\n          </div>\n        </div>\n        <Button \n          variant=\"outline\" \n          onClick={handleLogout}\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Sign Out\n        </Button>\n      </div>\n\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Account Information</CardTitle>\n          <CardDescription>Your profile details</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">Username</label>\n              <p className=\"text-lg\" data-testid=\"text-username\">{user.username}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">Email</label>\n              <p className=\"text-lg\" data-testid=\"text-email\">{user.email}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"orders\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"orders\" className=\"flex items-center gap-2\">\n            <ShoppingBag className=\"h-4 w-4\" />\n            My Orders\n          </TabsTrigger>\n          <TabsTrigger value=\"appointments\" className=\"flex items-center gap-2\">\n            <Wrench className=\"h-4 w-4\" />\n            Repair History\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"orders\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5\" />\n                Order History\n              </CardTitle>\n              <CardDescription>\n                Track your purchases and order status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {ordersLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                  <p className=\"mt-2 text-muted-foreground\">Loading orders...</p>\n                </div>\n              ) : orders && orders.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {orders.map((order) => (\n                    <div key={order.id} className=\"border rounded-lg p-4\" data-testid={`order-${order.id}`}>\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div>\n                          <h3 className=\"font-semibold\">Order #{order.id.slice(0, 8)}</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(order.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <Badge className={getStatusColor(order.status)}>\n                          {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                        </Badge>\n                      </div>\n                      <Separator className=\"mb-3\" />\n                      <div className=\"flex justify-between items-center\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          {Array.isArray(order.items) ? order.items.length : 0} item(s)\n                        </p>\n                        <p className=\"font-semibold\">â‚¹{parseFloat(order.totalAmount).toLocaleString()}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <ShoppingBag className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No orders yet</p>\n                  <p className=\"text-sm text-muted-foreground\">Start shopping to see your orders here!</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"appointments\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Wrench className=\"h-5 w-5\" />\n                Repair History\n              </CardTitle>\n              <CardDescription>\n                View your device repair appointments and status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {appointmentsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                  <p className=\"mt-2 text-muted-foreground\">Loading appointments...</p>\n                </div>\n              ) : appointments && appointments.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {appointments.map((appointment) => (\n                    <div key={appointment.id} className=\"border rounded-lg p-4\" data-testid={`appointment-${appointment.id}`}>\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div>\n                          <h3 className=\"font-semibold\">{appointment.device}</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Submitted {new Date(appointment.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <Badge className={getStatusColor(appointment.status || 'pending')}>\n                          {(appointment.status || 'pending').charAt(0).toUpperCase() + (appointment.status || 'pending').slice(1)}\n                        </Badge>\n                      </div>\n                      <Separator className=\"mb-3\" />\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm\"><strong>Issue:</strong> {appointment.issueDescription}</p>\n                        {appointment.appointmentDate && (\n                          <p className=\"text-sm\">\n                            <strong>Appointment:</strong> {new Date(appointment.appointmentDate).toLocaleDateString()}\n                          </p>\n                        )}\n                        {appointment.estimatedCost && (\n                          <p className=\"text-sm\">\n                            <strong>Estimated Cost:</strong> â‚¹{parseFloat(appointment.estimatedCost).toLocaleString()}\n                          </p>\n                        )}\n                        {appointment.actualCost && (\n                          <p className=\"text-sm\">\n                            <strong>Final Cost:</strong> â‚¹{parseFloat(appointment.actualCost).toLocaleString()}\n                          </p>\n                        )}\n                        {appointment.technicianNotes && (\n                          <p className=\"text-sm\">\n                            <strong>Notes:</strong> {appointment.technicianNotes}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No repair appointments yet</p>\n                  <p className=\"text-sm text-muted-foreground\">Book a repair service to see your appointments here!</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":11439},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, LogIn } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  \n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setIsLoading(true);\n\n    try {\n      await login(email, password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've successfully logged in.\",\n      });\n      navigate(\"/\");\n    } catch (err: any) {\n      setError(err.message || \"Failed to log in\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <CardTitle className=\"text-2xl font-bold flex items-center justify-center gap-2\">\n            <LogIn className=\"h-6 w-6\" />\n            Sign In\n          </CardTitle>\n          <CardDescription>\n            Enter your email and password to access your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                disabled={isLoading}\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                disabled={isLoading}\n                data-testid=\"input-password\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                  Signing In...\n                </>\n              ) : (\n                \"Sign In\"\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"text-center mt-6\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link href=\"/register\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-register\">\n                Create one here\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3929},"client/src/pages/order-confirmation.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { CheckCircle, ArrowLeft, ShoppingBag } from 'lucide-react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from 'wouter';\n\nexport default function OrderConfirmation() {\n  const [, setLocation] = useLocation();\n  const [paymentStatus, setPaymentStatus] = useState<'loading' | 'succeeded' | 'failed'>('loading');\n\n  useEffect(() => {\n    // Get payment status from URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const paymentIntentStatus = urlParams.get('payment_intent_status');\n    \n    if (paymentIntentStatus === 'succeeded') {\n      setPaymentStatus('succeeded');\n    } else if (paymentIntentStatus === 'failed' || paymentIntentStatus === 'canceled') {\n      setPaymentStatus('failed');\n    } else {\n      // Default to success if we reach this page (handles return_url redirect)\n      setPaymentStatus('succeeded');\n    }\n  }, []);\n\n  if (paymentStatus === 'loading') {\n    return (\n      <div className=\"container mx-auto px-4 py-8 max-w-2xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Processing Your Order...</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (paymentStatus === 'failed') {\n    return (\n      <div className=\"container mx-auto px-4 py-8 max-w-2xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-red-600 flex items-center gap-2\">\n              <ShoppingBag className=\"w-6 h-6\" />\n              Payment Failed\n            </CardTitle>\n            <CardDescription>\n              There was an issue processing your payment. Please try again.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              Your payment could not be processed. No charges have been made to your account.\n            </p>\n            \n            <div className=\"flex gap-3\">\n              <Link href=\"/cart\">\n                <Button data-testid=\"button-back-to-cart\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Cart\n                </Button>\n              </Link>\n              \n              <Link href=\"/marketplace\">\n                <Button variant=\"outline\" data-testid=\"button-continue-shopping\">\n                  Continue Shopping\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-2xl\">\n      <Card>\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mb-4\">\n            <CheckCircle className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n          </div>\n          <CardTitle className=\"text-green-600 dark:text-green-400\">\n            Payment Successful!\n          </CardTitle>\n          <CardDescription>\n            Thank you for your purchase from MOBO NYC\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          <div className=\"text-center space-y-2\">\n            <p className=\"text-muted-foreground\">\n              Your order has been successfully processed and is now being prepared for shipment.\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              You will receive an email confirmation shortly with your order details and tracking information.\n            </p>\n          </div>\n\n          <div className=\"bg-muted/50 rounded-lg p-4\">\n            <h3 className=\"font-semibold mb-2\">What's Next?</h3>\n            <ul className=\"text-sm text-muted-foreground space-y-1\">\n              <li>â€¢ Order confirmation email sent to your registered email</li>\n              <li>â€¢ Processing time: 1-2 business days</li>\n              <li>â€¢ Shipping: 3-5 business days</li>\n              <li>â€¢ Tracking details will be provided once shipped</li>\n            </ul>\n          </div>\n\n          <div className=\"flex flex-col gap-3\">\n            <Link href=\"/\">\n              <Button className=\"w-full\" data-testid=\"button-home\">\n                Return to Homepage\n              </Button>\n            </Link>\n            \n            <Link href=\"/marketplace\">\n              <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-shop-more\">\n                Continue Shopping\n              </Button>\n            </Link>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Need help? Contact our support team at{\" \"}\n              <a href=\"mailto:support@mobo-nyc.com\" className=\"text-primary hover:underline\">\n                support@mobo-nyc.com\n              </a>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5350},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, UserPlus } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Register() {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  \n  const { register } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n\n    if (formData.password !== formData.confirmPassword) {\n      setError(\"Passwords don't match\");\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError(\"Password must be at least 6 characters\");\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await register(formData.username, formData.email, formData.password, formData.confirmPassword);\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to MOBO NYC. You're now signed in.\",\n      });\n      navigate(\"/\");\n    } catch (err: any) {\n      setError(err.message || \"Failed to create account\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <CardTitle className=\"text-2xl font-bold flex items-center justify-center gap-2\">\n            <UserPlus className=\"h-6 w-6\" />\n            Create Account\n          </CardTitle>\n          <CardDescription>\n            Join MOBO NYC for the best electronics and repair services\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                placeholder=\"Choose a username\"\n                value={formData.username}\n                onChange={handleChange}\n                required\n                disabled={isLoading}\n                data-testid=\"input-username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n                disabled={isLoading}\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Create a password (min. 6 characters)\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n                disabled={isLoading}\n                data-testid=\"input-password\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n              <Input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                placeholder=\"Confirm your password\"\n                value={formData.confirmPassword}\n                onChange={handleChange}\n                required\n                disabled={isLoading}\n                data-testid=\"input-confirm-password\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-register\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                  Creating Account...\n                </>\n              ) : (\n                \"Create Account\"\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"text-center mt-6\">\n            <p className=\"text-sm text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-login\">\n                Sign in here\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5588}},"version":1}